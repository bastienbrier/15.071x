sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
dsqk
dkslqdlsq
8*6
2^16
2^
4
8*6
2^16
2^
8*6
8*10
sqrt(2)
abs(-§())
abs(-65)
?sqrt
SquareRoot2 = sqrt(2)
SquareRoot2
HoursYear <- 365*24
HoursYear
ls()
c(2,3,5,6,13)
Country = c("Brazil", "China", "India", "Switzerland", "USA")
LifeExpectancy = c(74,76,65,83,79)
Country
LifeExpectancy
Country[1]
LifeExpectancy[3]
seq(0,100,2)
CountryData = data.frame(Country,LifeExpectancy)
CountryData
CountryData$Population = c(199000,1390000,1240000,7997,318000)
CountryData
Country = c("Australia", "Greece")
LifeExpectancy = c(82,81)
Population = c(23050,11125)
NewCountryData = data.frame(Country, LifeExpectancy, Population)
NewCountryData
AllCountryData = rbind(CountryData, NewCountryData)
AllCountryData
mvt = read.csv("mvtWeek1.csv")
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012 = c(94, 88, 95, 88, 93, 94, 98, 97, 93, 94)
wins2013 = c(97, 97, 92, 93, 92, 96, 94, 96, 92, 90)
c2012 = lm(teamRank ~ wins2012, data=teamRank)
summary(wins2012)
str(wins2012)
cor(teamRank, wins2012)
cor(teamRank, wins2013)
parole = read.csv("parole.csv")
str(parole)
sum(parole$violator == 1)
parole$state
parole$crime
table(parole$state)
str(parole$state)
parole$state = as.factor(parole$state)#
parole$crime = as.factor(parole$crime)
parole$state
table(parole$state)
str(parole$state)
summary(parole$state)
set.seed(144)#
library(caTools)#
split = sample.split(parole$violator, SplitRatio = 0.7)#
train = subset(parole, split == TRUE)#
test = subset(parole, split == FALSE)
Model1 = glm(violator ~ ., data=train, family="binomial")
summary(Model1)
exampleMan = data.frame(male = 1, race = 1, age = 50, state = as.factor(1), time.served = 3, max.sentence = 2, multiple.offenses = 0, crime = as.factor(2))
exampleMan
exampleMan = data.frame(male = 1, race = 1, age = 50, state = as.factor(1), time.served = 3, max.sentence = 12, multiple.offenses = 0, crime = as.factor(2))
exampleMan
probability = predict(Model1, type="response", newdata=exampleMan)
odds = probability / (1 - probability)#
odds#
probability
predictedProb = predict(Model1, type="response", newdata=test)
max(predictedProb)
table(test$violator, predictedProb > 0.5)
12 / (12 + 11) #sensitivity#
167 / (167 + 12) # specificity#
(167 + 12) / (167 + 12 + 12 + 11) #accuracy
(167 + 12) / (167 + 12 + 12 + 11)
table(test$violator, predictedProb > 0.9)
table(test$violator, predictedProb > 0.1)
table(test$violator, predictedProb > 0.5)
library(ROCR)
ROCRpred = prediction(predictedProb, test$violator)
as.numeric(performance(ROCRpred, "auc")@y.values)
