sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
dsqk
dkslqdlsq
8*6
2^16
2^
4
8*6
2^16
2^
8*6
8*10
sqrt(2)
abs(-ยง())
abs(-65)
?sqrt
SquareRoot2 = sqrt(2)
SquareRoot2
HoursYear <- 365*24
HoursYear
ls()
c(2,3,5,6,13)
Country = c("Brazil", "China", "India", "Switzerland", "USA")
LifeExpectancy = c(74,76,65,83,79)
Country
LifeExpectancy
Country[1]
LifeExpectancy[3]
seq(0,100,2)
CountryData = data.frame(Country,LifeExpectancy)
CountryData
CountryData$Population = c(199000,1390000,1240000,7997,318000)
CountryData
Country = c("Australia", "Greece")
LifeExpectancy = c(82,81)
Population = c(23050,11125)
NewCountryData = data.frame(Country, LifeExpectancy, Population)
NewCountryData
AllCountryData = rbind(CountryData, NewCountryData)
AllCountryData
mvt = read.csv("mvtWeek1.csv")
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012 = c(94, 88, 95, 88, 93, 94, 98, 97, 93, 94)
wins2013 = c(97, 97, 92, 93, 92, 96, 94, 96, 92, 90)
c2012 = lm(teamRank ~ wins2012, data=teamRank)
summary(wins2012)
str(wins2012)
cor(teamRank, wins2012)
cor(teamRank, wins2013)
10 * exp(6/100*3) - 10
# 1.1#
loans = read.csv("loans.csv")#
table(loans$not.fully.paid)#
1533 / (8045 + 1533)#
#
# 1.2#
summary(loans)#
#
# 1.3#
sum(is.na(loans))#
missing = subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))#
table(missing$not.fully.paid)#
12/50#
#
# 1.4#
library(mice)#
set.seed(144)#
vars.for.imputation = setdiff(names(loans), "not.fully.paid")#
imputed = complete(mice(loans[vars.for.imputation]))#
loans[vars.for.imputation] = imputed#
loans_imputed = read.csv("loans_imputed.csv")#
#
# 2.1#
set.seed(144)#
library(caTools)#
split = sample.split(loans_imputed$not.fully.paid, SplitRatio = 0.7)#
train = subset(loans_imputed, split == TRUE)#
test = subset(loans_imputed, split == FALSE)#
logModel = glm(not.fully.paid ~ ., data=train, family=binomial)#
summary(logModel)#
#
# 2.2#
difference = (-9.317e-03 * 700) - (-9.317e-03 * 710)#
difference#
ratio = exp((-9.317e-03 * 700) - (-9.317e-03 * 710))#
ratio#
#
# 2.3#
predicted.risk = predict(logModel, type="response", newdata=test)#
test$predicted.risk = predicted.risk#
table(test$not.fully.paid, test$predicted.risk > 0.5)#
(2400 + 3) / (2400 + 13 + 457 + 3) #accuracy#
(2400 + 13) / (2400 + 13 + 457 + 3) #accuracy baseline model#
#
# 2.4#
library(ROCR)#
ROCRpred = prediction(test$predicted.risk, test$not.fully.paid)#
as.numeric(performance(ROCRpred, "auc")@y.values)#
#
# 3.1#
intModel = glm(not.fully.paid ~ int.rate, data=train, family=binomial)#
summary(intModel)#
#
# 3.2#
Predict2 = predict(intModel, newdata=test, type="response")#
max(Predict2)#
table(test$not.fully.paid, Predict2 > 0.5)#
#
# 3.3#
ROCRpred2 = prediction(Predict2, test$not.fully.paid)#
as.numeric(performance(ROCRpred2, "auc")@y.values)#
#
# 4.1#
10 * exp(6/100*3) - 10
10 * exp(6/100*3)
test$profit = exp(test$int.rate*3) - 1
test$profit[test*not.fully.paid == 1] = -1
test$profit[test$not.fully.paid == 1] = -1
max(test$profit)
max(test$profit) * 10
highInterest = subset(test, int.rate > 0.15)#
mean(highInterest$profit)
table(highInterest$not.fully.paid)
110 / (110 + 327)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans = subset(highInterest, predicted.risk <= cutoff)
sum(selectedLoans$profit)#
table(selectedLoans$not.fully.paid)
