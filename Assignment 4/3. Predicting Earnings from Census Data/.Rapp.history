sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
dsqk
dkslqdlsq
8*6
2^16
2^
4
8*6
2^16
2^
8*6
8*10
sqrt(2)
abs(-ยง())
abs(-65)
?sqrt
SquareRoot2 = sqrt(2)
SquareRoot2
HoursYear <- 365*24
HoursYear
ls()
c(2,3,5,6,13)
Country = c("Brazil", "China", "India", "Switzerland", "USA")
LifeExpectancy = c(74,76,65,83,79)
Country
LifeExpectancy
Country[1]
LifeExpectancy[3]
seq(0,100,2)
CountryData = data.frame(Country,LifeExpectancy)
CountryData
CountryData$Population = c(199000,1390000,1240000,7997,318000)
CountryData
Country = c("Australia", "Greece")
LifeExpectancy = c(82,81)
Population = c(23050,11125)
NewCountryData = data.frame(Country, LifeExpectancy, Population)
NewCountryData
AllCountryData = rbind(CountryData, NewCountryData)
AllCountryData
mvt = read.csv("mvtWeek1.csv")
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012 = c(94, 88, 95, 88, 93, 94, 98, 97, 93, 94)
wins2013 = c(97, 97, 92, 93, 92, 96, 94, 96, 92, 90)
c2012 = lm(teamRank ~ wins2012, data=teamRank)
summary(wins2012)
str(wins2012)
cor(teamRank, wins2012)
cor(teamRank, wins2013)
census = read.csv("census.csv")
library(caTools)
set.seed(2000)
split = sample.split(census$over50k, SplitRatio=0.6)
train = subset(census, split == TRUE)
test = subset(census, split == FALSE)
logModel = glm(over50k ~ ., data=train, family=binomial)
summary(logModel)
logPredict = predict(logModel, newdata=test, type="response")
table(test$over50k, logPredict >= 0.5)
(9051+1888) / (9051+662+1190+1888)
(9051+662) / (9051+662+1190+1888)
libray(ROCR)
library(ROCR)
pred = prediction(logPredict, test$over50k)
as.numeric(performance(pred, "auc")@y.values)
library(rpart)
library(rpart.plot)
treeModel = rpart(over50k ~ ., data=train, method="class")
rpart.plot(treeModel)
treePredict = predict(treeModel, newdata=test, type="class")
table(test$over50k, treePredict)
(9243+1596) / (9243+470+1482+1596)
treePredict = predict(treeModel, newdata=test)
pred = prediction(PredictTest[,2], test$over50k)
PredictTest = predict(treeModel, newdata=test)#
pred = prediction(PredictTest[,2], test$over50k)
perf = performance(pred, "tpr", "fpr")
# 1.1#
census = read.csv("census.csv")#
library(caTools)#
set.seed(2000)#
split = sample.split(census$over50k, SplitRatio=0.6)#
train = subset(census, split == TRUE)#
test = subset(census, split == FALSE)#
logModel = glm(over50k ~ ., data=train, family=binomial)#
summary(logModel)#
#
# 1.2#
logPredict = predict(logModel, newdata=test, type="response")#
table(test$over50k, logPredict >= 0.5)#
(9051+1888) / (9051+662+1190+1888)#
#
# 1.3#
(9051+662) / (9051+662+1190+1888)#
#
# 1.4#
library(ROCR)#
pred = prediction(logPredict, test$over50k)#
as.numeric(performance(pred, "auc")@y.values)#
#
# 2.1 - 2.3#
library(rpart)#
library(rpart.plot)#
treeModel = rpart(over50k ~ ., data=train, method="class")#
rpart.plot(treeModel)#
#
# 2.4#
treePredict = predict(treeModel, newdata=test, type="class")#
table(test$over50k, treePredict)#
(9243+1596) / (9243+470+1482+1596)#
#
# 2.5#
treePredict = predict(treeModel, newdata=test)#
treePred = prediction(treePredict[,2], test$over50k)#
treePerf = performance(treePred, "tpr", "fpr")
plot(treePerf)
as.numeric(performance(treePred, "auc")@y.values)
set.seed(1)
trainSmall = train[sample(nrow(train), 2000),]
library(randomForest)
set.seed(1)
forestModel = randomForest(over50k ~ ., data=trainSmall)
forestPredict = predict(forestModel, newdata=test)
table(test$over50k, forestPredict)
(9586+1093) / (9586+127+1985+1093)
vu = varUsed(forestModel, count=TRUE)
vusorted = sort(vu, decreasing=FALSE, index.return=TRUE)
dotchart(vusorted$x, names(forestModel$forest$xlevels[vusorted$ix]))
varImpPlot(forestModel)
set.seed(2)
cartGrid = expand.grid(.cp=seq(0.002,0.1,0.002))
train(over50k ~ ., data=train, method="rpart", trControl=numFolds, tuneGrid=cartGrid)
set.seed(2)#
library(caret)#
library(e1071)#
cartGrid = expand.grid(.cp=seq(0.002,0.1,0.002))#
train(over50k ~ ., data=train, method="rpart", trControl=numFolds, tuneGrid=cartGrid)
set.seed(2)#
library(caret)#
library(e1071)#
tr.Control = trainControl(method="cv", number=10)#
cartGrid = expand.grid(.cp=seq(0.002,0.1,0.002))#
tr = train(over50k ~ ., data=train, method="rpart", trControl=tr.Control, tuneGrid=cartGrid)
summary(tr)
tr
tr
newTreeModel = rpart(over50k ~ ., data=train, cp=0.002, method="class")
newTreePredict = predict(newTreeModel, newdata=test, type="class")
table(test$over50k, newTreePredict)
(9178+1838) / (9178+535+1240+1838)
prp(newTreeModel)
